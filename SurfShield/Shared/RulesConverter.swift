//
//  RulesConverter.swift
//  SufrShield
//
//  Created by –ê—Ä—Ç—É—Ä –ö—É–ª–∏–∫ on 25.08.2025.
//
import Foundation
import SafariServices


/// –ú–æ–¥—É–ª—å –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã
public class RulesConverter {
    // MARK: - Singleton
    public static let shared = RulesConverter()
    
    // MARK: Internal Properties
    private let groupID: String = Constants.adblockGroupId
    private let extensionsBundles: [String] = Constants.BlockExtenesionBundleIds.all
    
    /// –ü–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª —Å fallback –∫ bundle
    /// - Parameter type: —Ç–∏–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    /// - Returns: URL —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª –∏–ª–∏ fallback –∫ bundle
    internal func getExtensionFileURLWithFallback(forType type: RulesType) -> URL? {
        return type.filePath
    }
    // MARK: - Public Methods
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–æ—Ç–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫)
    public func saveEmptyRules() async {
        print("üîÑ –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        let emptyRuleArray = [self.createEmptyRule()]
        
        guard let emptyRulesJSON = self.convertRulesToJSON(emptyRuleArray) else {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª")
            return
        }
        
        await saveEmptyRules(emptyRulesJSON)
        
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª...")
        await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
        print("‚úÖ –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–≤–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫)
    /// - Parameter convertedRules: –º–∞—Å—Å–∏–≤ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    public func saveConvertedRules(_ convertedRules: [String]) async {
        await saveConvertedRulesToGroup(convertedRules)
        
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª...")
        await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
        print("‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    public func applyBlockingState(_ isEnabled: Bool) async {
        print("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞: \(isEnabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω")")
        
        if isEnabled {
//            await generateFiles()
            await enableContentBlocker()
        } else {
            await generateEmptyRules()
        }
    }
    
    //MARK: Main Method
    private func enableContentBlocker() async  {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if let cachedRules = loadCachedRules() {
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö...")
            await saveConvertedRulesToGroup(cachedRules)
            await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        print("üîÑ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞...")
        await convertAndSaveRules()
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à
    private func convertAndSaveRules() async {
        guard let rulesPath = Bundle.main.path(forResource: "adblock_rules2", ofType: "txt") else {
            print("‚ùå –§–∞–π–ª adblock_rules2.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bundle")
            return
        }
        
        let rulesString = try! String(contentsOfFile: rulesPath, encoding: .utf8)
        let lines = rulesString.components(separatedBy: .newlines)
        let chunkedRules = lines.chunked(by: 140000)
        var resultArray: [String] = []
        
        print("üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º \(lines.count) –ø—Ä–∞–≤–∏–ª...")
        
        for (index, chunkedRule) in chunkedRules.enumerated() {
            let result: ConversionResult = ContentBlockerConverter().convertArray(
                   rules: chunkedRule,
                   safariVersion: SafariVersion.autodetect(),
                   advancedBlocking: true,
                   maxJsonSizeBytes: nil,
                   progress: nil
               )
            resultArray.append(result.safariRulesJSON)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
        saveRulesToCache(resultArray)
        await saveConvertedRulesToGroup(resultArray)
        await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
        
        print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    private func generateEmptyRules() async {
        print("üîÑ –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
        
        let emptyRuleArray = [self.createEmptyRule()]
        
        guard let emptyRulesJSON = self.convertRulesToJSON(emptyRuleArray) else {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª")
            return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª
        await saveEmptyRules(emptyRulesJSON)
        
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª...")
        await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
        print("‚úÖ –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π
    /// - Parameter emptyRulesJSON: JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    private func saveEmptyRules(_ emptyRulesJSON: String) async {
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ App Group...")
        
        for ruleType in RulesType.allCases {
            ruleType.writeRules(emptyRulesJSON, emptyRules: true, groupID: self.groupID)
            print("‚úÖ –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è \(ruleType.rawValue)")
        }
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
    /// - Parameter convertedRules: –º–∞—Å—Å–∏–≤ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    private func saveConvertedRulesToGroup(_ convertedRules: [String]) async {
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ App Group...")
        
        for (index, ruleType) in RulesType.allCases.enumerated() {
            if let rules = convertedRules[safe: index] {
                ruleType.writeRules(rules, emptyRules: false, groupID: groupID)
                print("‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è \(ruleType.rawValue)")
            } else {
                // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ
                let emptyRuleArray = [createEmptyRule()]
                if let jsonString = convertRulesToJSON(emptyRuleArray) {
                    ruleType.writeRules(jsonString, emptyRules: true, groupID: groupID)
                    print("‚úÖ –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è \(ruleType.rawValue) (–Ω–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)")
                }
            }
        }
    }
    
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    private func saveJSONToFile(json: String) {
        do {
            let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
            let fileName = "safari_rules_\(Date().timeIntervalSince1970).json"
            let fileURL = documentsPath.appendingPathComponent(fileName)
            
            try json.write(to: fileURL, atomically: true, encoding: .utf8)
            
            print("üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: \(fileURL.path)")
            print("üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: \(fileURL.path)")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: \(error)")
        }
    }
    
    // MARK: - Cache Methods
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫—ç—à
    /// - Parameter rules: –º–∞—Å—Å–∏–≤ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    private func saveRulesToCache(_ rules: [String]) {
        let fileManager = FileManager.default
        guard let groupURL = fileManager.containerURL(forSecurityApplicationGroupIdentifier: groupID) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ App Group –¥–ª—è –∫—ç—à–∞")
            return
        }
        
        let cacheURL = groupURL.appendingPathComponent("cached_rules.json")
        
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: rules, options: .prettyPrinted)
            try jsonData.write(to: cacheURL)
            print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: \(cacheURL.path)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –≤ –∫—ç—à: \(error)")
        }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∫—ç—à–∞
    /// - Returns: –º–∞—Å—Å–∏–≤ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–ª–∏ nil, –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
    private func loadCachedRules() -> [String]? {
        let fileManager = FileManager.default
        guard let groupURL = fileManager.containerURL(forSecurityApplicationGroupIdentifier: groupID) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ App Group –¥–ª—è –∫—ç—à–∞")
            return nil
        }
        
        let cacheURL = groupURL.appendingPathComponent("cached_rules.json")
        
        guard fileManager.fileExists(atPath: cacheURL.path) else {
            print("üìã –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return nil
        }
        
        do {
            let jsonData = try Data(contentsOf: cacheURL)
            let rules = try JSONSerialization.jsonObject(with: jsonData) as? [String]
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return rules
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: \(error)")
            return nil
        }
    }
    
    /// –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–∞–≤–∏–ª
    private func clearRulesCache() {
        let fileManager = FileManager.default
        guard let groupURL = fileManager.containerURL(forSecurityApplicationGroupIdentifier: groupID) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ App Group –¥–ª—è –∫—ç—à–∞")
            return
        }
        
        let cacheURL = groupURL.appendingPathComponent("cached_rules.json")
        
        do {
            if fileManager.fileExists(atPath: cacheURL.path) {
                try fileManager.removeItem(at: cacheURL)
                print("‚úÖ –ö—ç—à –ø—Ä–∞–≤–∏–ª –æ—á–∏—â–µ–Ω")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∞–≤–∏–ª: \(error)")
        }
    }
 
    // MARK: - Private Methods
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private func createEmptyRule() -> [String: Any] {
        return [
            "trigger": [
                "url-filter": "^https?://never-existing-domain-for-adblocker-disabled\\.com/.*"
            ],
            "action": [
                "type": "block"
            ]
        ]
    }
    
    private func convertRulesToJSON(_ rules: [[String: Any]]) -> String? {
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: rules, options: .prettyPrinted)
            return String(data: jsonData, encoding: .utf8)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª –≤ JSON: \(error)")
            return nil
        }
    }
    
    private func reloadExtensions(bundles: [String], maxRetries: Int) async {
        guard !bundles.isEmpty else { return }
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É \(bundles.count) —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")

        
//        for bundle in bundles {
        await reloadSingleExtension(bundle: bundles.first!, maxRetries: 1)
//        }
        
        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
    }
    
    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    private func reloadSingleExtension(bundle: String, maxRetries: Int) async {
        var attempts = 0
        
        while attempts < maxRetries {
            attempts += 1
            do {
                try await SFContentBlockerManager.reloadContentBlocker(withIdentifier: bundle)
                print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ \(bundle) —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ \(attempts)/\(maxRetries))")
                return
            } catch {
                print("‚ùå –ü–æ–ø—ã—Ç–∫–∞ - –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è \(bundle):")
            }
        }
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ \(bundle) –ø–æ—Å–ª–µ \(maxRetries) –ø–æ–ø—ã—Ç–æ–∫")
    }
    
    
    
    //MARK: OLD
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∏–ª
//    private func generateFiles() async {
//        do {
//            let domains = try self.loadAndParseDomains()
//            let preparedRules = self.convertDomainsToSafariRules(domains)
//            self.saveRulesToFiles(preparedRules)
//            
//            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
//            await self.reloadExtensions(bundles: self.extensionsBundles, maxRetries: self.extensionsBundles.count)
//            print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
//        } catch {
//            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: \(error)")
//        }
//    }
    
//    func loadAndParseDomains() throws -> [String] {
//        guard let rulesPath = Bundle.main.path(forResource: "domains", ofType: "txt") else {
//            throw RulesConverterError.fileNotFound
//        }
//        
//        let rulesString = try String(contentsOfFile: rulesPath, encoding: .utf8)
//        let lines = rulesString.components(separatedBy: .newlines)
//        return lines.compactMap { line in
//            let trimmed = line.trimmingCharacters(in: .whitespaces)
//            guard !trimmed.isEmpty, !trimmed.hasPrefix("!"), !trimmed.hasPrefix("[") else { return nil }
//            guard !trimmed.contains("##") else { return nil }
//            return trimmed
//        }
//    }
    
//    private func convertDomainsToSafariRules(_ rules: [String]) -> [String] {
//        let chunks = rules.chunked(by: 35000)
//        var preparedRules = [String]()
//        
//        for chunk in chunks {
//            let safariRules = chunk.compactMap { domain in
//                let escapedDomain = domain.replacingOccurrences(of: ".", with: "\\.")
//                return [
//                    "trigger": [
//                        "url-filter": "^https?:/+([^/:]+\\.)?\(escapedDomain)[:/]",
//                        "load-type": ["third-party", "first-party"]
//                    ],
//                    "action": ["type": "block"]
//                ]
//            }
//            
//            if let jsonString = convertRulesToJSON(safariRules.isEmpty ? [createEmptyRule()] : safariRules) {
//                preparedRules.append(jsonString)
//            }
//        }
//        
//        return preparedRules
//    }
//    

}

/// –¢–∏–ø –µ–∫—Å—Ç–µ–Ω—à–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞
public enum RulesType: String, Codable, CaseIterable {
    case adBlock
    case privacy
    case banners
    case trackers
    case advanced
    case secure
    case basic
    
    /// –ü–æ–ª—É—á–∏—Ç—å URL –ø–æ –∫–∞—Ç–æ—Ä–æ–º—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å—Ç–µ–Ω—à–Ω–∞
    /// - Returns: URL –ø–æ –∫–∞—Ç–æ—Ä–æ–º—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª
    internal var filePath: URL? {
        let fileManager = FileManager.default
        // –ò—Å–ø–æ–ª—å–∑—É–π App Group –≤–º–µ—Å—Ç–æ Documents
        guard let groupURL = fileManager.containerURL(forSecurityApplicationGroupIdentifier: Constants.adblockGroupId) else {
            return nil
        }
        let fileURL = groupURL.appendingPathComponent("\(self.rawValue).json")
        return fileURL
    }
    
    private var fileName: String {
        return self.rawValue + ".json"
    }

    internal func writeRules(_ rules: String, emptyRules: Bool, groupID: String) {
        guard let filePath = getFilePath(groupID: groupID) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –¥–ª—è \(self.rawValue)")
            return 
        }
        let fileManager = FileManager.default
        
        do {
            // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            try rules.write(to: filePath, atomically: true, encoding: .utf8)
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            let fileHandle = try FileHandle(forWritingTo: filePath)
            try fileHandle.synchronize()
            try fileHandle.close()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if fileManager.fileExists(atPath: filePath.path) {
                let attributes = try? fileManager.attributesOfItem(atPath: filePath.path)
                let fileSize = attributes?[.size] as? Int64 ?? 0
                print("‚úÖ \(self.rawValue) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(filePath.path) (—Ä–∞–∑–º–µ—Ä: \(fileSize) –±–∞–π—Ç)")
            } else {
                print("‚ùå \(self.rawValue) —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: \(filePath.path)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ \(self.rawValue): \(error.localizedDescription)")
        }
    }
    
    private func getFilePath(groupID: String) -> URL? {
        let fileManager = FileManager.default
        guard let groupURL = fileManager.containerURL(forSecurityApplicationGroupIdentifier: groupID) else {
            return nil
        }
        let fileURL = groupURL.appendingPathComponent("\(self.rawValue).json")
        return fileURL
    }
}

extension Array {
    public func chunked(by chunkSize: Int) -> [[Element]] {
        return stride(from: 0, to: self.count, by: chunkSize).map {
            Array(self[$0..<Swift.min($0 + chunkSize, self.count)])
        }
    }
}

extension Array {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}



// MARK: - Error Types

private enum RulesConverterError: Error {
    case fileNotFound
}

// MARK: - AdBlock Rule Parser

