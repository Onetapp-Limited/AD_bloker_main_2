//
//  SimpleTest.swift
//  SufrShield
//
//  Created by –ê—Ä—Ç—É—Ä –ö—É–ª–∏–∫ on 03.09.2025.
//

import Foundation

// MARK: - Simple Test
class SimpleTest {
    
    static func testTrafficStatistics() {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞...")
        
        let interactor = WebViewInteractor()
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let initialStats = interactor.getTrafficStatistics()
        print("üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: \(initialStats.blockedRequestsCount) –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   - –†–∞–∑—Ä–µ—à–µ–Ω–æ: \(initialStats.allowedRequestsCount) –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   - –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: \(initialStats.formattedSavedBytes)")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        interactor.resetTrafficStatistics()
        let resetStats = interactor.getTrafficStatistics()
        let isReset = resetStats.blockedRequestsCount == 0 && resetStats.allowedRequestsCount == 0
        print("\(isReset ? "‚úÖ" : "‚ùå") –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: \(isReset ? "–£—Å–ø–µ—à–Ω–æ" : "–û—à–∏–±–∫–∞")")
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    }
    
    static func testRulesParsing() {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∞–≤–∏–ª...")
        
        let interactor = WebViewInteractor()
        
        // –ü–æ–ª—É—á–∞–µ–º JavaScript –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        let script = interactor.getMonitoringScript()
        print("üìã JavaScript –∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω (\(script.count) —Å–∏–º–≤–æ–ª–æ–≤)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let keyElements = [
            "blockedDomains",
            "blockedPatterns", 
            "shouldBlockResource",
            "originalFetch",
            "originalXHROpen"
        ]
        
        for element in keyElements {
            let contains = script.contains(element)
            let result = contains ? "‚úÖ" : "‚ùå"
            print("\(result) –≠–ª–µ–º–µ–Ω—Ç '\(element)': \(contains ? "–ù–∞–π–¥–µ–Ω" : "–ù–µ –Ω–∞–π–¥–µ–Ω")")
        }
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∞–≤–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    }
    
    static func testDomainsLoading() {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤...")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback —Å–∫—Ä–∏–ø—Ç —Å –¥–æ–º–µ–Ω–∞–º–∏
        let fallbackScript = ResourceMonitor.getFallbackMonitoringScript()
        print("üìã Fallback —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (\(fallbackScript.count) —Å–∏–º–≤–æ–ª–æ–≤)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–∫—Ä–∏–ø—Ç–µ –µ—Å—Ç—å –¥–æ–º–µ–Ω—ã
        let hasDomains = fallbackScript.contains("blockedDomains") && fallbackScript.contains("[")
        let result = hasDomains ? "‚úÖ" : "‚ùå"
        print("\(result) –î–æ–º–µ–Ω—ã –≤ fallback —Å–∫—Ä–∏–ø—Ç–µ: \(hasDomains ? "–ù–∞–π–¥–µ–Ω—ã" : "–ù–µ –Ω–∞–π–¥–µ–Ω—ã")")
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ
        let domainCount = fallbackScript.components(separatedBy: "'").count / 2
        print("üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤: \(domainCount)")
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    }
    
    static func runQuickTest() {
        print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç...")
        testTrafficStatistics()
        testRulesParsing()
        testDomainsLoading()
    }
    
    static func runAllTests() {
        testTrafficStatistics()
        testRulesParsing()
        testDomainsLoading()
    }
}
