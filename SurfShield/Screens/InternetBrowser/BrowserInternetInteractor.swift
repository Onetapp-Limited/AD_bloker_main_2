import Foundation

class BrowserInternetInteractor: BrowserInternetObservables, ObservableObject {
    
    @Published private(set) var goBack: Bool = false
    @Published private(set) var goForward: Bool = false
    @Published private(set) var googleUrl: URL = URL(string: "https://google.com")!
    @Published private(set) var needBackGo: Bool = false
    @Published private(set) var needForwardGo: Bool = false
    @Published private(set) var needRefresh: Bool = false
    @Published private(set) var currentProgress: Double = 0
    
    weak var navigationDelegate: BrowserInternetNavigationDelegate?
    
    // MARK: - Resource Analysis
    @Published var resourceAnalysis: ResourceAnalysisData?
    
    
    private let rulesConverter = RulesConverter()
    // MARK: - Resource Monitor
    private var resourceMonitor: ResourceMonitor?
    let userDefaultsObserver = UserDefaultsObserver.shared
    
    init() {
        setupResourceMonitor()
    }
    
    private func setupResourceMonitor() {
        resourceMonitor = ResourceMonitor()
        resourceMonitor?.delegate = self
    }
    
    func updateAddress(_ url: URL?) {
        guard let url = url else { return }
        self.googleUrl = url
    }
    
    func goToUrl(string: String) {
        let processedURLString = processURLString(string)
        
        guard let url = URL(string: processedURLString) else {
            return
        }
        
        navigationDelegate?.loadURL(url)
    }
    
    private func processURLString(_ input: String) -> String {
        let trimmed = input.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmed.isEmpty {
            return "https://google.com"
        }
        
        if trimmed.hasPrefix("http://") || trimmed.hasPrefix("https://") {
            return trimmed
        }
        
        if trimmed.range(of: #"^\d+\.\d+\.\d+\.\d+(:\d+)?$"#, options: .regularExpression) != nil {
            return "http://\(trimmed)"
        }
        
        if trimmed.contains(".") {
            return "https://\(trimmed)"
        }
        
        let encodedQuery = trimmed.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? trimmed
        return "https://google.com/search?q=\(encodedQuery)"
    }
    
    func refreshPage() {
        navigationDelegate?.reload()
    }
    
    func goBack(_ isGo: Bool) {
        navigationDelegate?.goBack()
    }
    
    func goForward(_ isGo: Bool) {
        navigationDelegate?.goForward()
    }
    
    func setCanGoBack(_ isAvailable: Bool) {
        self.needBackGo = isAvailable
    }
    
    func setCanGoForward(_ isAvailable: Bool) {
        self.needForwardGo = isAvailable
    }
    
    func updateLoadingProgress(_ progress: Double) {
        self.currentProgress = progress
    }
    
    func resetCommands() {
        needBackGo = false
        needForwardGo = false
        needRefresh = false
    }
    
    // MARK: - Rules Loading
    
    func loadAdBlockRules() -> String? {
        
        guard let rulesURL = rulesConverter.getExtensionFileURLWithFallback(forType: .adBlock) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç–∏–ø–∞ ")
            return nil
        }
        
        print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑: \(rulesURL.path)")
        
        do {
            let content = try String(contentsOf: rulesURL, encoding: .utf8)
            return content
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª : \(error)")
            return nil
        }
    }
    
    // MARK: - Traffic Statistics Methods
    
//    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
//    func getTrafficStatistics() -> TrafficStatistics {
//        return trafficStatistics
//    }
//    
//    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
//    func resetTrafficStatistics() {
//        trafficStatistics = TrafficStatistics()
//    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç ResourceMonitor –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebView
    func getResourceMonitor() -> ResourceMonitor? {
        return resourceMonitor
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    func getResourceAnalysis() -> ResourceAnalysisData? {
        return resourceAnalysis
    }
    
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    func resetResourceAnalysis() {
        resourceAnalysis = nil
    }
    
    // MARK: - Dark Theme Override
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JavaScript –∫–æ–¥ –¥–ª—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —á–µ—Ä–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
    func getDarkThemeScript() -> String {
        return """
        (function() {
            'use strict';

            console.log('üé® SurfShield: –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã...');

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–≤–µ—Ç–ª—ã–π –ª–∏ —Ü–≤–µ—Ç
            function isLightColor(color) {
                if (!color || color === 'transparent' || color === 'rgba(0, 0, 0, 0)') {
                    return false;
                }
                
                const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)/);
                if (!rgbMatch) return false;
                
                const r = parseInt(rgbMatch[1], 10);
                const g = parseInt(rgbMatch[2], 10);
                const b = parseInt(rgbMatch[3], 10);

                // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å (luminance)
                const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

                // –°—á–∏—Ç–∞–µ–º —Ü–≤–µ—Ç —Å–≤–µ—Ç–ª—ã–º, –µ—Å–ª–∏ —è—Ä–∫–æ—Å—Ç—å –±–æ–ª—å—à–µ 0.7 (70%)
                return luminance > 0.7;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∫ —Ñ–æ–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            function applyDarkTheme() {
                document.querySelectorAll('*').forEach(el => {
        
        
                    const style = getComputedStyle(el);

                    if (style.backgroundColor && isLightColor(style.backgroundColor)) {
                        el.style.setProperty('background-color', 'transparent', 'important');
                    }

                    if (style.borderColor && isLightColor(style.borderColor)) {
                        el.style.setProperty('border-color', 'white', 'important');
                    }

                    if (!isLightColor(style.color)) {
                        el.style.setProperty('color', 'white', 'important');
                    }
                });

                // –û–±—â–∏–π —Ñ–æ–Ω –∏ —Ç–µ–∫—Å—Ç –Ω–∞ body/html
                if (document.body) {
                    document.body.style.setProperty('background-color', '#1E1E20', 'important');
                    document.body.style.setProperty('color', 'white', 'important');
                }
                if (document.documentElement) {
                    document.documentElement.style.setProperty('background-color', '#1E1E20', 'important');
                    document.documentElement.style.setProperty('color', 'white', 'important');
                }

                console.log('‚úÖ SurfShield: –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –≤–∫–ª—é—á–∞—è –≤–µ—Ä—Ö–Ω–∏–µ —Å–ª–æ–∏');
            }


            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            applyDarkTheme();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', function() {
                    applyDarkTheme();
                });
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            window.addEventListener('load', function() {
                applyDarkTheme();
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
            if (window.MutationObserver) {
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'childList') {
                            mutation.addedNodes.forEach(function(node) {
                                if (node.nodeType === 1) { // Element node
                                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∫ –Ω–æ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                                    const style = getComputedStyle(node);
                                    
                                    if (style.backgroundColor && isLightColor(style.backgroundColor)) {
                                        node.style.setProperty('background-color', 'transparent', 'important');
                                    }
                                    
                                    if (style.borderColor && isLightColor(style.borderColor)) {
                                        node.style.setProperty('border-color', 'white', 'important');
                                    }
                                    
                                    if (!isLightColor(style.color)) {
                                        node.style.setProperty('color', 'white', 'important');
                                    }
                                    
                                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
                                    const children = node.querySelectorAll('*');
                                    children.forEach(function(child) {
                                        const childStyle = getComputedStyle(child);
                                        
                                        if (childStyle.backgroundColor && isLightColor(childStyle.backgroundColor)) {
                                            child.style.setProperty('background-color', 'transparent', 'important');
                                        }
                                        
                                        if (childStyle.borderColor && isLightColor(childStyle.borderColor)) {
                                            child.style.setProperty('border-color', 'white', 'important');
                                        }
                                        
                                        if (!isLightColor(childStyle.color)) {
                                            child.style.setProperty('color', 'white', 'important');
                                        }
                                    });
                                }
                            });
                        }
                    });
                });
                
                observer.observe(document.body || document.documentElement, {
                    childList: true,
                    subtree: true
                });
            }
            
            console.log('SurfShield: –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ú–ì–ù–û–í–ï–ù–ù–û');

            // –ü—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏ —Å–∫—Ä–æ–ª–ª–µ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        })();

        """
    }
}
