import SwiftUI
import Combine
import SafariServices

@MainActor
class MainAdBlockerViewModel: ObservableObject {
    
    @Published var waveProgress: Double = 0
    @Published var circleRotation: Double = 0
    @Published var isEnabled: Bool = false
    @Published var isProcess: Bool = false
    @Published var waveHeight: CGFloat = 0
    let rulesConverter = RulesConverterService()
    let userDefaultsInteractor = UserDefaultsService.shared
    
    private var blockingTask: Task<Void, Never>?
    private var continuousAnimationTask: Task<Void, Never>?
    var animationID = UUID() // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        let isEnabled = userDefaultsInteractor.load(Bool.self, forKey: .adBlockerEnabled)
        self.isEnabled = isEnabled ?? false
    }
    
    func toggleBlocking() {
        if !isProcess {
            toggleAllBlocking()
        } else {
            cancelBlockingTask()
        }
    }
    
    private func toggleAllBlocking() {
        animate()
        
        // –°—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let newState = !isEnabled
        
        blockingTask = Task {
            if !newState {
                try? await Task.sleep(nanoseconds: 1_000_000_000)
            }
            
            if !Task.isCancelled {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ RulesConverter
                await rulesConverter.applyBlockingState(newState)
                userDefaultsInteractor.save(newState, forKey: .adBlockerEnabled)
                await MainActor.run {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    withAnimation(.bouncy(duration: 0.2)) {
                        isProcess = false
                        isEnabled = newState
                    }
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
                    if newState {
                        startContinuousAnimation()
                    } else {
                        stopContinuousAnimation()
                    }
                }
            }
        }
    }

    
    func animate() {
        animationID = UUID()

        // Disable previous animation
        var transaction = Transaction()
        transaction.disablesAnimations = true
        withTransaction(transaction) {
            circleRotation = 0
            waveHeight = 0
            waveProgress = 0
        }

        withAnimation(.bouncy(duration: 0.2, extraBounce: 0.1)) {
            isProcess = true
        }
        
        withAnimation(.easeInOut(duration: 1.0).repeatForever()) {
            self.waveProgress = 1.0
        }
        
//        withAnimation(.linear(duration: 2.0).repeatForever(autoreverses: false)) {
            self.circleRotation = 360
//        }
    }
    
    func cancelBlockingTask() {
        blockingTask?.cancel()
        blockingTask = nil
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        withAnimation(.easeInOut(duration: 0.2)) {
            isProcess = false
        }
        
        // –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if !isEnabled {
            stopContinuousAnimation()
        }
    }
    
    private func resetAnimations() {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        animationID = UUID()
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞
        var transaction = Transaction()
        transaction.disablesAnimations = true
        
        withTransaction(transaction) {
            circleRotation = 0
            waveHeight = 0
            waveProgress = 0
        }
    }
    
    func startContinuousAnimation() {
        stopContinuousAnimation() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        
        animationID = UUID()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var transaction = Transaction()
        transaction.disablesAnimations = true
        withTransaction(transaction) {
            circleRotation = 0
            waveProgress = 0
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        withAnimation(.easeInOut(duration: 1.0).repeatForever()) {
            self.waveProgress = 1.0
        }
        
        withAnimation(.linear(duration: 8.0).repeatForever(autoreverses: false)) {
            self.circleRotation = 360
        }
    }
    
    private func stopContinuousAnimation() {
        continuousAnimationTask?.cancel()
        continuousAnimationTask = nil
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        resetAnimations()
    }
    
    // MARK: - Extension Reload Methods
    func reloadExtension(bundleId: String) {
        Task {
            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: \(bundleId)")
            do {
                try await SFContentBlockerManager.reloadContentBlocker(withIdentifier: bundleId)
                print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ \(bundleId) —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è \(bundleId): \(error.localizedDescription)")
            }
        }
    }
    
    func reloadAdBlocker() {
        reloadExtension(bundleId: "com.adBloker.main.app.adblocker")
    }
    
    func reloadPrivacy() {
        reloadExtension(bundleId: "com.adBloker.main.app.privacy")
    }
    
    func reloadBanners() {
        reloadExtension(bundleId: "com.adBloker.main.app.banners")
    }
    
    func reloadTrackers() {
        reloadExtension(bundleId: "com.adBloker.main.app.trackers")
    }
    
    func reloadAdvanced() {
        reloadExtension(bundleId: "com.adBloker.main.app.advanced")
    }
}
